/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package WorkoutGui;

import PlayingExerciseGui.PlayingExerciseFrame;
import staticData.DialogBoxIcon;
import WorkoutModel.Exercise;
import WorkoutModel.Workout;
import WorkoutModel.WorkoutList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 * @author jamyangtamang
 * Is a panel that shows the workouts the user has
 * if the user doesn't have workouts it puts up a default workout
 */
public class WorkoutPanel extends javax.swing.JPanel {
    private Workout workout;
    private WorkoutBuddyGui gui;
    private DefaultTableModel model;
    private WorkoutList workoutList;

    /**
     * Creates new form WokroutPannel
     * @param name keeps a reference to the workout this panel is for
     * @param gui keeps reference to the WorkoutBuddyGui
     * @param wokroutlist keeps track of all the workouts in the user's database
     */
    
    public WorkoutPanel(Workout name, WorkoutBuddyGui gui, WorkoutList workoutList) {
        initComponents();
        workout = name;
        this.gui = gui;
        this.workoutList = workoutList;
        model = (DefaultTableModel) workoutTable.getModel();
    }
    
    /** 
     *  updates the model of the table when user adds or updates exercises
     */
    public void updateTable(int index){
        Object rowData[] = new Object[4];
        int updateIndex = index;
        rowData[0] = workout.getExercise(updateIndex).getName();
        rowData[1] = workout.getExercise(updateIndex).getSet();
        rowData[2] = workout.getExercise(updateIndex).getRep();
        rowData[3] = workout.getExercise(updateIndex).getWeight();
        model.insertRow(updateIndex, rowData);
        workoutList.saveToFile();
    }
    
    /**
     * loads existing data and adds it to the table model
     */
    public void loadTable(){
        Object rowData[] = new Object[4];
        int lastIndex = workout.getNumExercise();
        for(int i = 0; i < lastIndex; i++){
            rowData[0] = workout.getExercise(i).getName();
            rowData[1] = workout.getExercise(i).getSet();
            rowData[2] = workout.getExercise(i).getRep();
            rowData[3] = workout.getExercise(i).getWeight();
            model.addRow(rowData);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        AddExercisesBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workoutTable = new javax.swing.JTable();
        startBtn = new javax.swing.JButton();
        deleteExerciseBtn = new javax.swing.JButton();
        updateExerciseBtn = new javax.swing.JButton();

        AddExercisesBtn.setText("Add Exercise");
        AddExercisesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddExercisesBtnActionPerformed(evt);
            }
        });

        workoutTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Exercise", "Sets", "Reps", "Weight"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        workoutTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(workoutTable);

        startBtn.setText("Start this Workout");
        startBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });

        deleteExerciseBtn.setText("Delete Exercise");
        deleteExerciseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteExerciseBtnActionPerformed(evt);
            }
        });

        updateExerciseBtn.setText("Update Exercise");
        updateExerciseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateExerciseBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(AddExercisesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteExerciseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(updateExerciseBtn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(startBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddExercisesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteExerciseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateExerciseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );
    }// </editor-fold>//GEN-END:initComponents

    /** 
     * brings up an AddExercise menu
     */ 
    private void AddExercisesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddExercisesBtnActionPerformed
        AddExercise exercise = new AddExercise(this, workout);
        exercise.setVisible(true);
        gui.setVisible(false);
    }//GEN-LAST:event_AddExercisesBtnActionPerformed

    /**
     * brigs up a PlayingExerciseFrame for this workout
     */
    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
        // TODO add your handling code here:
        if(workout.getNumExercise() > 0){
            PlayingExerciseFrame exercisePanel = new PlayingExerciseFrame(gui, workout);
            exercisePanel.setVisible(true);
            gui.setVisible(false);
        }
        else
            JOptionPane.showMessageDialog(null, "You have no exercises in this workout!", "No Exercises", JOptionPane.WARNING_MESSAGE, DialogBoxIcon.ATTENTION);
    }//GEN-LAST:event_startBtnActionPerformed

    public void removeThatRow(){
            model.removeRow(workoutTable.getSelectedRow());
    }
    
    /** 
     * brings up an UpdateExercise menu
     */ 
    private void updateExerciseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateExerciseBtnActionPerformed
    if(workout.getNumExercise() > 0){
        if(workoutTable.getSelectedRow() != -1){
            UpdateExercise exercise = new UpdateExercise(this, workout, workoutTable.getSelectedRow()); 
            exercise.setVisible(true);
            gui.setVisible(false);
        }
        else
            JOptionPane.showMessageDialog(null, "Please Select an  exercise to Update", "Update Exercise", JOptionPane.WARNING_MESSAGE,  DialogBoxIcon.ATTENTION);
    }
    else
        JOptionPane.showMessageDialog(null, "You have no exercises to update!", "No Exercises", JOptionPane.WARNING_MESSAGE, DialogBoxIcon.ERROR);
        
    }//GEN-LAST:event_updateExerciseBtnActionPerformed

    /**
     * triggers the deletion of user selected exercise
     */
    private void deleteExerciseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteExerciseBtnActionPerformed
    if(workout.getNumExercise() > 0){
        if(workoutTable.getSelectedRow() != -1){
            workout.deleteExercise(workoutTable.getSelectedRow());
            this.removeThatRow();
            workoutList.saveToFile();
        }
        else
            JOptionPane.showMessageDialog(null, "Please Select an exercise to Delete", "Delete Exercise", JOptionPane.WARNING_MESSAGE,  DialogBoxIcon.ATTENTION);
    }
    else
        JOptionPane.showMessageDialog(null, "You have no exercises to remove!", "No Exercises", JOptionPane.WARNING_MESSAGE,  DialogBoxIcon.ERROR);

    }//GEN-LAST:event_deleteExerciseBtnActionPerformed
           
    public void addExercise(Exercise exercise){
        workout.addExercise(exercise);
    }
    
    public Exercise getExercise(int index){
        return workout.getExercise(index);
    }
    
    public void makeGuiVisible() {
        gui.setVisible(true);
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddExercisesBtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton deleteExerciseBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton startBtn;
    private javax.swing.JButton updateExerciseBtn;
    private javax.swing.JTable workoutTable;
    // End of variables declaration//GEN-END:variables
}
