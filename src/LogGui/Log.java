/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LogGui;

import WorkoutGui.WorkoutBuddyGui;
import LogModel.LogModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import staticData.DialogBoxIcon;

/**
 *
 * @author jamyangtamang
 * 
 * Creates new form LoaderBoardPanel
 * @param model is a reference to the tables models
 * @param gui is a reference to the WokroutBuddyGui it belongs to 
 * @param log is a reference to the itself as there can only be one instance of log 
 * @param logmodel is a reference to the log model upon which the log table gets updated
 */
public class Log extends javax.swing.JFrame {
    private  DefaultTableModel model;
    private static WorkoutBuddyGui gui;
    private static Log log;
    private LogModel logmodel;
    
    /**
     * Creates new form Log
     */
    
    /**
     * 
     * Creates the Log and loads log from a file saved as log.txt 
     * which is present in the data folder of every user
     */
    private Log(WorkoutBuddyGui gui) {
        this.setTitle("Workout Log");
        this.gui = gui;
        logmodel = LogModel.getInstance();
        initComponents();
        model = (DefaultTableModel) logTable.getModel();
        
        
        logmodel.loadFromFile();
        if(logmodel.getSize() > 0){
            for(int updateIndex = 0; updateIndex < logmodel.getSize(); updateIndex++)
                this.updateLog();
        }
        else
            JOptionPane.showMessageDialog(null,"You have no history of workouts!","No Entries",JOptionPane.INFORMATION_MESSAGE, DialogBoxIcon.ISSUE); 
    }
    
    /**
     * @return the instance of the log
     */
    public static Log getLog(WorkoutBuddyGui gui){
        if(log == null)
            return log = new Log(gui);
        else
            return log;
    }
    
    /** 
     * allows for the change of visiblity
     */
    public static void makeVisible(){
        log.setVisible(true);
    }
    
    /**
     * if the log model gets updated this updates the table model
     */
    public void updateLog(){
        Object rowData[] = new Object[3];
        rowData[0] = logmodel.getEntry(logmodel.getSize()-1).getDate();
        rowData[1] = logmodel.getEntry(logmodel.getSize()-1).getName();
        rowData[2] = logmodel.getEntry(logmodel.getSize()-1).getStatus();
        model.addRow(rowData);
        logmodel.saveToLogFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        logTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Name", "Completed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        logTable.setEnabled(false);
        jScrollPane1.setViewportView(logTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backBtn)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(backBtn))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        this.setVisible(false);
        gui.setVisible(true);
    }//GEN-LAST:event_backBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable logTable;
    // End of variables declaration//GEN-END:variables
}
