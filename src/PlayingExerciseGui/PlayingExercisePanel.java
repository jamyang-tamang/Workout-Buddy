/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PlayingExerciseGui;

import Workout_Web_Services.WorkoutApiProvider;
import staticData.DialogBoxIcon;
import WorkoutModel.Exercise;
import java.awt.Image;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import javax.swing.ImageIcon;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jamyangtamang
 * @param model the table model 
 * @param exerciseIcon the icon for the exercise
 * @param iconCache keeps a reference to all the loaded icons so they load up faster in subsequent loads of the tab
 */


public class PlayingExercisePanel extends javax.swing.JPanel {
    private Exercise exercise;
    private DefaultTableModel model;
    private Object rowData[] = new Object[3];
    private PlayingExerciseFrame parentFrame;
    private ImageIcon exerciseIcon;
    private static HashMap<String, ImageIcon> iconCache;
    private String iconUrl;
    private Thread iconThread;
    
    /**
     * Creates new form PlayingExerise
     * @param exercise keeps reference to the exercise that this tab is for
     * @param tab keeps a refernce to the frame that this tab belongs to
     * adds the number of sets amount of rep count and weight
     * adds the icon using a thread
     * while image icon is loading sets up a default gif to display load
     */
    
    public PlayingExercisePanel(Exercise exercise, PlayingExerciseFrame tab) {
        iconCache = new HashMap();
        initComponents();
        jLblIcon.setIcon(DialogBoxIcon.LOADING);
        iconThread = new Thread(new RunnableClass());
        iconThread.start();
        parentFrame = tab;
        this.exercise = exercise;
        if (exercise.getDescription().isBlank()){
            exerciseDescription.setText("No description is provided for this workout!");
        }
        else
            exerciseDescription.setText(exercise.getDescription());
        model = (DefaultTableModel) exerciseTable.getModel();
        ListSelectionModel listmodel = exerciseTable.getSelectionModel();
        for(int i = 0; i < exercise.getSet(); i++){
            rowData[0] = i+1;
            rowData[1] = exercise.getRep();
            rowData[2] = exercise.getWeight();  
            model.addRow(rowData);
        }
        exerciseTable.changeSelection(0, 0, false, false);
    }
    
    /**
     * runs the loading of icon in a thread so it happens in the background
     */
    private class RunnableClass implements Runnable{

        @Override
        public synchronized void run() {
            getIcon();
        }
        
    }
    
    /**
     * gets the image from the url
     * if image isn't found it puts up a default image
     */
    public void getIcon(){
        iconUrl = WorkoutApiProvider.getIconURLString(exercise.getapiId());
        if(iconUrl.contains("no Image")){
            exerciseIcon = DialogBoxIcon.WORKOUT;
        }
        else{
            if(iconCache.containsKey(iconUrl))
                exerciseIcon = iconCache.get(iconUrl);
            else{
                try {
                    exerciseIcon = new ImageIcon(new ImageIcon(new URL(iconUrl)).getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH));
                    iconCache.put(iconUrl, exerciseIcon);
                } catch (MalformedURLException ex) {
                    exerciseIcon = DialogBoxIcon.WORKOUT;
                }
            }   
        }
        if(exerciseIcon != null)
            jLblIcon.setIcon(exerciseIcon);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        exerciseTable = new javax.swing.JTable();
        nextBtn = new javax.swing.JButton();
        jLblIcon = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        exerciseDescription = new javax.swing.JTextPane();

        setToolTipText("");
        setAutoscrolls(true);

        exerciseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Set", "Reps", "Weight"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        exerciseTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        exerciseTable.setEnabled(false);
        exerciseTable.setFillsViewportHeight(true);
        exerciseTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(exerciseTable);

        nextBtn.setText("Next");
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });

        jLblIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jScrollPane2.setViewportView(exerciseDescription);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 337, Short.MAX_VALUE)
                        .addComponent(nextBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLblIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextBtn)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /** 
     * shifts the set by one once next is pressed
     * if the set is last in the workout renames it to don
     * if user completes the workout adds a entry to the log marking it as done
     * @param evt event trigger
     */
    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed
        // TODO add your handling code here:
        if(exerciseTable.getSelectedRow() < (exerciseTable.getRowCount()-1)){
            exerciseTable.changeSelection(exerciseTable.getSelectedRow()+1, 0, true, true);
            if(exerciseTable.getSelectedRow() == exerciseTable.getRowCount()-1)
                nextBtn.setText("Done");
        }
        else{
            parentFrame.nextTab();
        }
        
    }//GEN-LAST:event_nextBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane exerciseDescription;
    private javax.swing.JTable exerciseTable;
    private javax.swing.JLabel jLblIcon;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton nextBtn;
    // End of variables declaration//GEN-END:variables
}
